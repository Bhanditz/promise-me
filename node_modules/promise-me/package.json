{
  "name": "promise-me",
  "version": "0.0.1",
  "description": "Code transformer to change Node-style callbacks into promises.",
  "main": "index.js",
  "preferGlobal": true,
  "bin": {
    "promise-me": "./bin/promise-me"
  },
  "scripts": {
    "test": "jasmine-node spec/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Stuk/promise-me.git"
  },
  "keywords": [
    "promise",
    "esprima",
    "transform"
  ],
  "author": {
    "name": "Stuart Knightley"
  },
  "license": "BSD",
  "dependencies": {
    "esprima": "1.0.x",
    "escodegen": "0.0.x",
    "estraverse": "0.0.x"
  },
  "devDependencies": {
    "jasmine-node": "1.0.x"
  },
  "readme": "Promise Me\n==========\n\nPromise Me helps you move your code from using callbacks to using [promises](http://wiki.commonjs.org/wiki/Promises/A), for example through [Q](https://github.com/kriskowal/q), [RSVP.js](https://github.com/tildeio/rsvp.js) or [when.js](https://github.com/cujojs/when).\n\nIt parses your code and then manipulates the AST to transform the callbacks into calls to `then()`, including a rejection handler if you handle the original callback error. Think of it as a slightly smarter find-and-replace. It will probably break your code and require you to fix it.\n\n[![Build Status](https://secure.travis-ci.org/Stuk/promise-me.png?branch=master)](https://travis-ci.org/Stuk/promise-me)\n\nInstallation and usage\n----------------------\n\n```bash\n$ npm install -g promise-me\n```\n\n```bash\n$ promise-me script.js\n```\n\n\nExamples\n--------\n\n### Simple callback\n\nBefore:\n```javascript\ngetDetails(\"Bob\", function (err, details) {\n    console.log(details)\n});\n```\n\nAfter:\n```javascript\ngetDetails('Bob').then(function (details) {\n    console.log(details);\n});\n```\n\n### Error handling\n\nBefore:\n```javascript\ngetDetails(\"Bob\", function (err, details) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(details)\n});\n```\n\nAfter:\n```javascript\ngetDetails('Bob').then(function (details) {\n    console.log(details);\n}, function (err) {\n    console.error(err);\n    return;\n});\n```\n\n### Nested callbacks\n\nBefore:\n```javascript\ngetDetails(\"Bob\", function (err, details) {\n    getLongLat(details.address, details.country, function(err, longLat) {\n        getNearbyBars(longLat, function(err, bars) {\n            console.log(\"Your nearest bar is: \" + bars[0]);\n        });\n    });\n});\n```\n\nAfter:\n```javascript\ngetDetails('Bob').then(function (details) {\n    return getLongLat(details.address, details.country);\n}).then(function (longLat) {\n    return getNearbyBars(longLat);\n}).then(function (bars) {\n    console.log('Your nearest bar is: ' + bars[0]);\n});\n```\n\n\n",
  "_id": "promise-me@0.0.1",
  "_from": "promise-me@*"
}
